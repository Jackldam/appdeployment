<#
.SYNOPSIS
    Short description
.DESCRIPTION
    Long description
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    Inputs (if any)
.OUTPUTS
    Output (if any)
.NOTES
    General notes
#>
[CmdletBinding()]
param (
    [Parameter()]
    [string]
    $CheckFilePath = "C:\SWDeployment"
)

$Parent = $PSScriptRoot

$AppInfo = Get-Content -Path:"$Parent\AppInfo.json" | ConvertFrom-Json

$FullAppName = @(
    $($Appinfo.appVendor),
    $($Appinfo.appName),
    $($Appinfo.appVersion)
)

$Test = ("<`#
    .SYNOPSIS
        This is an autogenerated application detection script
    .DESCRIPTION
        This is an autogenerated application detection script
        Vendor: $($Appinfo.appVendor)
        Product: $($Appinfo.appName)
        Version: $($Appinfo.appVersion)
    .INPUTS
        none
    .OUTPUTS
        boolean output True or False
    .NOTES
        Generated by $($env:USERNAME)
        time $(Get-Date)
`#>
[CmdletBinding()]
param (
)

`#`# Variables: Exit Code
[int32]`$mainExitCode = 0

`#Save installer application version to variable
`$InstallerApplicationVersion = `"$($Appinfo.appVersion)`"
Write-Verbose `"Installer $($Appinfo.appName) version `$InstallerApplicationVersion`"

#Region Detection method 1
`#`#*===============================================
`#`#* Detection method 2
`#`#* SWDeployment Json File
`#`#*===============================================
Write-Verbose `"Start detection method 1`"
try {
`#Test if Custom detection file is present for current application.
`$DetectionFile = `"$CheckFilePath\$(`"{0}_{1}_{2}.json`" -f $FullAppName)`"
`$TestApp = Test-Path -Path:`$DetectionFile -ErrorAction:Stop
if ([bool]`$TestApp) {
    Write-Verbose `"$CheckFilePath\$(`"{0}_{1}_{2}.json`" -f $FullAppName) Found`"

    `#Save currently installed version to variable read it from the json
    `$installedApplicationVersion = (Get-Content `$DetectionFile | ConvertFrom-Json).AppVersion
    Write-Verbose `"Currently installed Application version `$installedApplicationVersion`"

    `#Test if Installed 
    if ([version]`$installedApplicationVersion -ge [version]`$InstallerApplicationVersion) {
        Write-Verbose `"Currently installed version is greater or equal then `$InstallerApplicationVersion `"
        #Output Boolean true value
        `$true
        exit `$mainExitCode
    }
}
else {
    Write-Verbose `"$CheckFilePath\$(`"{0}_{1}_{2}.json`" -f $FullAppName) Not found`"

}
}
catch {
    Write-Verbose `"$CheckFilePath\$(`"{0}_{1}_{2}.json`" -f $FullAppName) Not found`"
}
`#endregion Detection method 1


`# `#Region Detection method 2
`# `#`#*===============================================
`# `#`#* Detection method 2
`# `#`#* Application installation path + version number
`# `#`#*===============================================
`# 
`# Write-Verbose `"Start detection method 2`"
`# try {
`# `#Default installation path of the application
`# `$installationPath = `"$($AppInfo.InstallPath)`"
`# 
`# #Test if a version of this application is already installed and if True proceed to test version
`# `$TestApp = Test-Path -Path:`$installationPath -ErrorAction:Stop
`# 
`# `#If boolean true proceed to test version
`# if ([bool]`$TestApp) {
`#     Write-Verbose `"Application installation path found`"
`# 
`#     #Save installed application version to variable
`#     `$installedApplicationVersion = (Get-ItemProperty -Path:`$installationPath).VersionInfo.FileVersion
`#     
`#     `#Replace , for .
`#     `$installedApplicationVersion = `$installedApplicationVersion.Replace(`",`", `".`")
`# 
`#     `#Remove empty spaces
`#     `$installedApplicationVersion = `$installedApplicationVersion.Replace(`" `", `"`")
`# 
`#     Write-Verbose `"Currently installed Application version `$installedApplicationVersion`"
`# 
`#     #Test if Installed 
`#     if ([version]`$installedApplicationVersion -ge [version]`$InstallerApplicationVersion) {
`#         Write-Verbose `"Currently installed version is greater or equal then `$InstallerApplicationVersion `"
`# 
`#         #Output Boolean true value
`#         `$true
`#         exit `$mainExitCode
`#     }
`# }
`# else {
`#     Write-Verbose `"installation path not found`"
`# }
`# }
`# catch {
`# Write-Verbose `"installation path not found`"
`#     
`# }
`# `#endregion Detection method 2
")



$Test | Out-File -FilePath:"$Parent\CheckPath.ps1"
